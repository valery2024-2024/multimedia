import os
import tkinter as tk
from tkinter import filedialog, messagebox
from PIL import Image

root = tk.Tk()
root.title("–ü—Ä–∞–∫—Ç–∏—á–Ω–∞ ‚Ññ3 ‚Äî SpriteSheet Cutter (Tkinter + Pillow)")
root.geometry("480x480")
root.resizable(False, False)

# --- –≥–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ ---
mode = tk.StringVar(value="count")
filename = None
img_info_var = tk.StringVar(value="(—Ñ–∞–π–ª –Ω–µ –æ–±—Ä–∞–Ω–æ)")
status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤–æ")
divisors_var = tk.StringVar(value="")  # —Ç—É—Ç –±—É–¥–µ–º–æ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –¥—ñ–ª—å–Ω–∏–∫–∏

# --- —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É –¥—ñ–ª—å–Ω–∏–∫—ñ–≤ ---
def get_divisors(n: int):
    divs = []
    for i in range(1, n + 1):
        if n % i == 0:
            divs.append(i)
    return divs

# --- –≤–∏–±—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è ---
def open_file():
    global filename
    path = filedialog.askopenfilename(
        title="–û–±—Ä–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è",
        filetypes=[("Image files", "*.png *.jpg *.jpeg *.bmp")]
    )
    if not path:
        return
    try:
        with Image.open(path) as im:
            w, h = im.size
        filename = path
        img_info_var.set(f"–§–∞–π–ª: {os.path.basename(path)}  |  {w}√ó{h}px")

        # –∑–Ω–∞–π–¥–µ–º–æ –¥—ñ–ª—å–Ω–∏–∫–∏ –¥–ª—è —à–∏—Ä–∏–Ω–∏ —Ç–∞ –≤–∏—Å–æ—Ç–∏
        div_w = get_divisors(w)
        div_h = get_divisors(h)
        divisors_var.set(
            f"–î—ñ–ª—å–Ω–∏–∫–∏ —à–∏—Ä–∏–Ω–∏ {w}: {div_w}\n"
            f"–î—ñ–ª—å–Ω–∏–∫–∏ –≤–∏—Å–æ—Ç–∏ {h}: {div_h}\n\n"
            "üëâ –û–±–µ—Ä–∏ –æ–¥–Ω—É —à–∏—Ä–∏–Ω—É —Ç–∞ –≤–∏—Å–æ—Ç—É –∑ —Ü—å–æ–≥–æ —Å–ø–∏—Å–∫—É\n"
            "–≤ —Ä–µ–∂–∏–º—ñ '–∑–∞ —Ä–æ–∑–º—ñ—Ä–æ–º'."
        )

        status_var.set("–§–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
    except Exception as ex:
        messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª:\n{ex}")
        filename = None
        img_info_var.set("(—Ñ–∞–π–ª –Ω–µ –æ–±—Ä–∞–Ω–æ)")
        status_var.set("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è")

# --- –ø–µ—Ä–µ–º–∏–∫–∞—á —Ä–µ–∂–∏–º—ñ–≤ ---
def update_fields():
    if mode.get() == "count":
        frame_count.pack(fill="x", padx=10, pady=(0, 10))
        frame_size.forget()
    else:
        frame_size.pack(fill="x", padx=10, pady=(0, 10))
        frame_count.forget()

# --- –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---
def parse_positive_int(entry: tk.Entry, field_name: str) -> int:
    try:
        val = int(entry.get())
        if val <= 0:
            raise ValueError
        return val
    except ValueError:
        messagebox.showwarning("–ü–æ–º–∏–ª–∫–∞", f"{field_name} –º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–∏–º > 0")
        raise

def ensure_image_loaded() -> Image.Image:
    if not filename:
        messagebox.showinfo("–ù–µ–º–∞—î —Ñ–∞–π–ª—É", "–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
        raise RuntimeError
    return Image.open(filename)

def choose_save_dir() -> str:
    save_path = filedialog.askdirectory(title="–û–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è")
    if not save_path:
        raise RuntimeError
    return save_path

# --- –æ—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –Ω–∞—Ä—ñ–∑–∞–Ω–Ω—è ---
def save_sprites():
    try:
        img = ensure_image_loaded()
        save_dir = choose_save_dir()
    except RuntimeError:
        return

    try:
        if mode.get() == "count":
            rows = parse_positive_int(rows_entry, "–†—è–¥–∫–∏")
            cols = parse_positive_int(cols_entry, "–°—Ç–æ–≤–ø—Ü—ñ")
            if img.width % cols != 0 or img.height % rows != 0:
                messagebox.showerror("–ù–µ–ø–æ–¥—ñ–ª—å–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏",
                    f"{img.width}√ó{img.height} –Ω–µ –¥—ñ–ª–∏—Ç—å—Å—è –Ω–∞ {rows}√ó{cols}")
                return
            cell_w = img.width // cols
            cell_h = img.height // rows
        else:
            cell_w = parse_positive_int(cell_w_entry, "–®–∏—Ä–∏–Ω–∞ —Å–ø—Ä–∞–π—Ç–∞")
            cell_h = parse_positive_int(cell_h_entry, "–í–∏—Å–æ—Ç–∞ —Å–ø—Ä–∞–π—Ç–∞")
            if img.width % cell_w != 0 or img.height % cell_h != 0:
                messagebox.showerror("–ù–µ–ø–æ–¥—ñ–ª—å–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏",
                    f"{img.width}√ó{img.height} –Ω–µ –¥—ñ–ª–∏—Ç—å—Å—è –Ω–∞ {cell_w}√ó{cell_h}")
                return
            cols = img.width // cell_w
            rows = img.height // cell_h

    except ValueError:
        return

    os.makedirs(save_dir, exist_ok=True)
    index = 0
    for r in range(rows):
        for c in range(cols):
            x1, y1 = c * cell_w, r * cell_h
            x2, y2 = x1 + cell_w, y1 + cell_h
            sprite = img.crop((x1, y1, x2, y2))
            sprite.save(os.path.join(save_dir, f"sprite_{index}.png"))
            index += 1

    messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ {index} —Ñ–∞–π–ª—ñ–≤ —É {save_dir}")
    status_var.set(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ {index} —Å–ø—Ä–∞–π—Ç—ñ–≤")

# --- UI ---
file_frame = tk.Frame(root, padx=10, pady=10)
file_frame.pack(fill="x")
tk.Button(file_frame, text="–û–±—Ä–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è", command=open_file).pack(side="left")
tk.Label(file_frame, textvariable=img_info_var, wraplength=280, justify="left").pack(side="left", padx=10)

mode_frame = tk.Frame(root, padx=10)
mode_frame.pack(fill="x")
tk.Radiobutton(mode_frame, text="–ù–∞—Ä—ñ–∑–∞—Ç–∏ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é", variable=mode, value="count", command=update_fields).pack(anchor="w")
tk.Radiobutton(mode_frame, text="–ù–∞—Ä—ñ–∑–∞—Ç–∏ –∑–∞ —Ä–æ–∑–º—ñ—Ä–æ–º", variable=mode, value="size", command=update_fields).pack(anchor="w")

frame_count = tk.Frame(root, padx=10)
tk.Label(frame_count, text="–†—è–¥–∫–∏:").pack(anchor="w")
rows_entry = tk.Entry(frame_count); rows_entry.insert(0, "4"); rows_entry.pack(fill="x")
tk.Label(frame_count, text="–°—Ç–æ–≤–ø—Ü—ñ:").pack(anchor="w")
cols_entry = tk.Entry(frame_count); cols_entry.insert(0, "4"); cols_entry.pack(fill="x")
frame_count.pack(fill="x", padx=10, pady=(0, 10))

frame_size = tk.Frame(root, padx=10)
tk.Label(frame_size, text="–®–∏—Ä–∏–Ω–∞ —Å–ø—Ä–∞–π—Ç–∞:").pack(anchor="w")
cell_w_entry = tk.Entry(frame_size); cell_w_entry.insert(0, "64"); cell_w_entry.pack(fill="x")
tk.Label(frame_size, text="–í–∏—Å–æ—Ç–∞ —Å–ø—Ä–∞–π—Ç–∞:").pack(anchor="w")
cell_h_entry = tk.Entry(frame_size); cell_h_entry.insert(0, "64"); cell_h_entry.pack(fill="x")

btns = tk.Frame(root, padx=10, pady=5); btns.pack(fill="x")
tk.Button(btns, text="–ù–∞—Ä—ñ–∑–∞—Ç–∏ —Ç–∞ –∑–±–µ—Ä–µ–≥—Ç–∏", command=save_sprites).pack(fill="x")

# –ø–æ–ª–µ –∑ –ø—ñ–¥–∫–∞–∑–∫–æ—é –¥–ª—è –¥—ñ–ª—å–Ω–∏–∫—ñ–≤
hint_frame = tk.Frame(root, padx=10, pady=5); hint_frame.pack(fill="x")
tk.Label(hint_frame, textvariable=divisors_var, justify="left", fg="blue", wraplength=460).pack()

status_bar = tk.Label(root, textvariable=status_var, anchor="w", bd=1, relief="sunken")
status_bar.pack(side="bottom", fill="x")

root.mainloop()
